@function contains(
  $list,
  $values...
) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}
@function font-source-declaration(
  $font-family,
  $file-path,
  $file-formats
) {
  $src: ();

  $formats-map: (
    "eot":   "#{$file-path}.eot?#iefix" format("embedded-opentype"),
    "woff2": "#{$file-path}.woff2" format("woff2"),
    "woff":  "#{$file-path}.woff" format("woff"),
    "ttf":   "#{$file-path}.ttf" format("truetype"),
    "svg":   "#{$file-path}.svg##{$font-family}" format("svg")
  );

  @each $format in $file-formats {
    @if contains(map-keys($formats-map), $format) {
      $value: map-get($formats-map, $format);
      $file-path: nth($value, 1);
      $font-format: nth($value, 2);
      $src: append($src, url($file-path) $font-format, comma);
    } @else {
      @error "`#{$file-formats}` contains an unsupported font file format. ";
    }
  }

  @return $src;
}

@mixin font-face-custom(
  $font-family,
  $file-path,
  $file-formats
) {
  @font-face {
    font-family: $font-family;
    src: font-source-declaration(
        $font-family,
        $file-path,
        $file-formats
    );
    @content;
  }
}
